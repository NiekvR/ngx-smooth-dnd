{"version":3,"sources":["ng://ngx-smooth-dnd/src/draggable/draggable.component.ts","ng://ngx-smooth-dnd/src/container/container.component.ts","ng://ngx-smooth-dnd/src/ngx-smooth-dnd.module.ts"],"names":["wrapperClass","smoothDnd","constants","animationClass","DraggableComponent","_a","prototype","ngAfterViewInit","this","wrapper","nativeElement","parentNode","className","Component","args","selector","template","ViewChild","smoothDnD","dropHandler","dropHandlers","reactDropHandler","handler","wrapChild","ContainerComponent","_ngZone","dragStart","EventEmitter","dragEnd","drop","dropReady","dragEnter","dragLeave","container","containerElementRef","getOptions","ngOnDestroy","dispose","_this","options","orientation","behaviour","groupName","lockAxis","dragHandleSelector","nonDragAreaSelector","dragBeginDelay","animationDuration","autoScrollEnabled","dragClass","dropClass","dropPlaceholder","onDragStart","info","getNgZone","emit","onDragEnd","onDrop","dropResult","getChildPayload","shouldAnimateDrop","shouldAcceptDrop","onDragEnter","onDragLeave","onDropReady","getGhostParent","clb","run","NgZone","ContentChildren","Input","Output","NgxSmoothDnDModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { constants } from 'smooth-dnd';\nconst {\n  wrapperClass,\n  animationClass\n} = constants;\n\nconst constantClasses = {\n  [wrapperClass]: true,\n  [animationClass]: true,\n};\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'smooth-dnd-draggable',\n  templateUrl: './draggable.component.html'\n})\nexport class DraggableComponent implements AfterViewInit {\n  @ViewChild('draggableWrapper') wrapper: ElementRef;\n  ngAfterViewInit() {\n    this.wrapper.nativeElement.parentNode.className = constants.wrapperClass;\n  }\n}\n","import { Component, ContentChildren, QueryList, AfterContentInit, ViewChild, ElementRef, AfterViewInit, Input, OnDestroy, OnInit, Output, EventEmitter, NgZone } from '@angular/core';\nimport { DraggableComponent } from '../draggable/draggable.component';\nimport { dropHandlers, smoothDnD, DropResult, ContainerOptions } from 'smooth-dnd';\n\nsmoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;\nsmoothDnD.wrapChild = false;\n\nexport interface DragStartEndInfo {\n  isSource: boolean;\n  payload: any;\n  willAcceptDrop: boolean;\n}\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: \"smooth-dnd-container\",\n  templateUrl: \"./container.component.html\"\n})\nexport class ContainerComponent implements AfterViewInit, OnDestroy {\n  private container: any;\n  @ContentChildren(DraggableComponent)\n  draggables: QueryList<DraggableComponent>;\n  @ViewChild(\"container\") containerElementRef: ElementRef;\n\n  @Input(\"orientation\") orientation;\n  @Input(\"behaviour\") behaviour;\n  @Input(\"groupName\") groupName;\n  @Input(\"lockAxis\") lockAxis;\n  @Input(\"dragHandleSelector\") dragHandleSelector;\n  @Input(\"nonDragAreaSelector\") nonDragAreaSelector;\n  @Input(\"dragBeginDelay\") dragBeginDelay;\n  @Input(\"animationDuration\") animationDuration;\n  @Input(\"autoScrollEnabled\") autoScrollEnabled;\n  @Input(\"dragClass\") dragClass;\n  @Input(\"dropClass\") dropClass;\n  @Input(\"dropPlaceholder\") dropPlaceholder;\n  @Input(\"removeOnDropOut\") removeOnDropOut;\n\n  @Output() dragStart = new EventEmitter<DragStartEndInfo>();\n  @Output() dragEnd = new EventEmitter<DragStartEndInfo>();\n  @Output() drop = new EventEmitter<DropResult>();\n  @Output() dropReady = new EventEmitter<DropResult>();\n  @Input() getChildPayload: (index: number) => {};\n  @Input()\n  shouldAnimateDrop: (\n    sourceContainerOptions: ContainerOptions,\n    payload: any\n  ) => boolean;\n  @Input()\n  shouldAcceptDrop: (\n    sourceContainerOptions: ContainerOptions,\n    payload: any\n  ) => boolean;\n  @Output() dragEnter = new EventEmitter();\n  @Output() dragLeave = new EventEmitter();\n\n  @Input()\n  getGhostParent: () => HTMLElement;\n\n  constructor(private _ngZone: NgZone) { }\n\n  ngAfterViewInit() {\n    this.container = smoothDnD(\n      this.containerElementRef.nativeElement,\n      this.getOptions()\n    );\n  }\n  ngOnDestroy(): void {\n    this.container.dispose();\n  }\n\n  private getOptions(): ContainerOptions {\n    const options: ContainerOptions = {};\n    if (this.orientation) options.orientation = this.orientation;\n    if (this.behaviour) options.behaviour = this.behaviour;\n    if (this.groupName) options.groupName = this.groupName;\n    if (this.lockAxis) options.lockAxis = this.lockAxis;\n    if (this.dragHandleSelector)\n      options.dragHandleSelector = this.dragHandleSelector;\n    if (this.nonDragAreaSelector)\n      options.nonDragAreaSelector = this.nonDragAreaSelector;\n    if (this.dragBeginDelay) options.dragBeginDelay = this.dragBeginDelay;\n    if (this.animationDuration)\n      options.animationDuration = this.animationDuration;\n    if (this.autoScrollEnabled)\n      options.autoScrollEnabled = this.autoScrollEnabled;\n    if (this.dragClass) options.dragClass = this.dragClass;\n    if (this.dropClass) options.dropClass = this.dropClass;\n    if (this.dropPlaceholder) options.dropPlaceholder = this.dropPlaceholder;\n\n    if (this.dragStart)\n      options.onDragStart = (info: DragStartEndInfo) => {\n        this.getNgZone(() => {\n          this.dragStart.emit(info);\n        });\n      };\n\n    if (this.dragEnd)\n      options.onDragEnd = (info: DragStartEndInfo) => {\n        this.getNgZone(() => {\n          this.dragEnd.emit(info);\n        });\n      };\n\n    if (this.drop)\n      options.onDrop = (dropResult: DropResult) => {\n        this.getNgZone(() => {\n          this.drop.emit(dropResult);\n        });\n      };\n\n    if (this.getChildPayload) options.getChildPayload = this.getChildPayload;\n    if (this.shouldAnimateDrop)\n      options.shouldAnimateDrop = this.shouldAnimateDrop;\n    if (this.shouldAcceptDrop) options.shouldAcceptDrop = this.shouldAcceptDrop;\n\n    if (this.dragEnter)\n      options.onDragEnter = () => this.getNgZone(() => this.dragEnter.emit());\n    if (this.dragLeave)\n      options.onDragLeave = () => this.getNgZone(() => this.dragLeave.emit());\n\n    if (this.dropReady)\n      options.onDropReady = (dropResult: DropResult) => {\n        this.getNgZone(() => {\n          this.dropReady.emit(dropResult);\n        });\n      };\n    \n    if (this.getGhostParent) options.getGhostParent = this.getGhostParent;\n\n    return options;\n  }\n\n  private getNgZone(clb) {\n    this._ngZone.run(() => {\n      clb();\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContainerComponent } from './container/container.component';\nimport { DraggableComponent } from './draggable/draggable.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ContainerComponent, DraggableComponent],\n  exports: [ContainerComponent, DraggableComponent]\n})\nexport class NgxSmoothDnDModule {}\n"]}